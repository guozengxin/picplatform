/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Blacklist_H
#define Blacklist_H

#include <TProcessor.h>
#include "blacklist_types.h"

namespace blacklist {

class BlacklistIf {
 public:
  virtual ~BlacklistIf() {}
  virtual void filter(std::string& _return, const std::string& inStr, const std::string& mf, const std::string& picfilter1) = 0;
  virtual void getdocid(std::string& _return, const std::string& url) = 0;
};

class BlacklistIfFactory {
 public:
  typedef BlacklistIf Handler;

  virtual ~BlacklistIfFactory() {}

  virtual BlacklistIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BlacklistIf* /* handler */) = 0;
};

class BlacklistIfSingletonFactory : virtual public BlacklistIfFactory {
 public:
  BlacklistIfSingletonFactory(const boost::shared_ptr<BlacklistIf>& iface) : iface_(iface) {}
  virtual ~BlacklistIfSingletonFactory() {}

  virtual BlacklistIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BlacklistIf* /* handler */) {}

 protected:
  boost::shared_ptr<BlacklistIf> iface_;
};

class BlacklistNull : virtual public BlacklistIf {
 public:
  virtual ~BlacklistNull() {}
  void filter(std::string& /* _return */, const std::string& /* inStr */, const std::string& /* mf */, const std::string& /* picfilter1 */) {
    return;
  }
  void getdocid(std::string& /* _return */, const std::string& /* url */) {
    return;
  }
};

typedef struct _Blacklist_filter_args__isset {
  _Blacklist_filter_args__isset() : inStr(false), mf(false), picfilter1(false) {}
  bool inStr;
  bool mf;
  bool picfilter1;
} _Blacklist_filter_args__isset;

class Blacklist_filter_args {
 public:

  Blacklist_filter_args() : inStr(""), mf(""), picfilter1("") {
  }

  virtual ~Blacklist_filter_args() throw() {}

  std::string inStr;
  std::string mf;
  std::string picfilter1;

  _Blacklist_filter_args__isset __isset;

  void __set_inStr(const std::string& val) {
    inStr = val;
  }

  void __set_mf(const std::string& val) {
    mf = val;
  }

  void __set_picfilter1(const std::string& val) {
    picfilter1 = val;
  }

  bool operator == (const Blacklist_filter_args & rhs) const
  {
    if (!(inStr == rhs.inStr))
      return false;
    if (!(mf == rhs.mf))
      return false;
    if (!(picfilter1 == rhs.picfilter1))
      return false;
    return true;
  }
  bool operator != (const Blacklist_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Blacklist_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Blacklist_filter_pargs {
 public:


  virtual ~Blacklist_filter_pargs() throw() {}

  const std::string* inStr;
  const std::string* mf;
  const std::string* picfilter1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Blacklist_filter_result__isset {
  _Blacklist_filter_result__isset() : success(false) {}
  bool success;
} _Blacklist_filter_result__isset;

class Blacklist_filter_result {
 public:

  Blacklist_filter_result() : success("") {
  }

  virtual ~Blacklist_filter_result() throw() {}

  std::string success;

  _Blacklist_filter_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Blacklist_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Blacklist_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Blacklist_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Blacklist_filter_presult__isset {
  _Blacklist_filter_presult__isset() : success(false) {}
  bool success;
} _Blacklist_filter_presult__isset;

class Blacklist_filter_presult {
 public:


  virtual ~Blacklist_filter_presult() throw() {}

  std::string* success;

  _Blacklist_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Blacklist_getdocid_args__isset {
  _Blacklist_getdocid_args__isset() : url(false) {}
  bool url;
} _Blacklist_getdocid_args__isset;

class Blacklist_getdocid_args {
 public:

  Blacklist_getdocid_args() : url("") {
  }

  virtual ~Blacklist_getdocid_args() throw() {}

  std::string url;

  _Blacklist_getdocid_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const Blacklist_getdocid_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Blacklist_getdocid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Blacklist_getdocid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Blacklist_getdocid_pargs {
 public:


  virtual ~Blacklist_getdocid_pargs() throw() {}

  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Blacklist_getdocid_result__isset {
  _Blacklist_getdocid_result__isset() : success(false) {}
  bool success;
} _Blacklist_getdocid_result__isset;

class Blacklist_getdocid_result {
 public:

  Blacklist_getdocid_result() : success("") {
  }

  virtual ~Blacklist_getdocid_result() throw() {}

  std::string success;

  _Blacklist_getdocid_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Blacklist_getdocid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Blacklist_getdocid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Blacklist_getdocid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Blacklist_getdocid_presult__isset {
  _Blacklist_getdocid_presult__isset() : success(false) {}
  bool success;
} _Blacklist_getdocid_presult__isset;

class Blacklist_getdocid_presult {
 public:


  virtual ~Blacklist_getdocid_presult() throw() {}

  std::string* success;

  _Blacklist_getdocid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BlacklistClient : virtual public BlacklistIf {
 public:
  BlacklistClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BlacklistClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void filter(std::string& _return, const std::string& inStr, const std::string& mf, const std::string& picfilter1);
  void send_filter(const std::string& inStr, const std::string& mf, const std::string& picfilter1);
  void recv_filter(std::string& _return);
  void getdocid(std::string& _return, const std::string& url);
  void send_getdocid(const std::string& url);
  void recv_getdocid(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BlacklistProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<BlacklistIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (BlacklistProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_filter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getdocid(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BlacklistProcessor(boost::shared_ptr<BlacklistIf> iface) :
    iface_(iface) {
    processMap_["filter"] = &BlacklistProcessor::process_filter;
    processMap_["getdocid"] = &BlacklistProcessor::process_getdocid;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~BlacklistProcessor() {}
};

class BlacklistProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BlacklistProcessorFactory(const ::boost::shared_ptr< BlacklistIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BlacklistIfFactory > handlerFactory_;
};

class BlacklistMultiface : virtual public BlacklistIf {
 public:
  BlacklistMultiface(std::vector<boost::shared_ptr<BlacklistIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BlacklistMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BlacklistIf> > ifaces_;
  BlacklistMultiface() {}
  void add(boost::shared_ptr<BlacklistIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void filter(std::string& _return, const std::string& inStr, const std::string& mf, const std::string& picfilter1) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->filter(_return, inStr, mf, picfilter1);
        return;
      } else {
        ifaces_[i]->filter(_return, inStr, mf, picfilter1);
      }
    }
  }

  void getdocid(std::string& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getdocid(_return, url);
        return;
      } else {
        ifaces_[i]->getdocid(_return, url);
      }
    }
  }

};

} // namespace

#endif
